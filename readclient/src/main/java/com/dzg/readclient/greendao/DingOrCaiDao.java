package com.dzg.readclient.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dzg.readclient.mvp.model.DingOrCai;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DING_OR_CAI".
*/
public class DingOrCaiDao extends AbstractDao<DingOrCai, Long> {

    public static final String TABLENAME = "DING_OR_CAI";

    /**
     * Properties of entity DingOrCai.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property JokeId = new Property(1, int.class, "jokeId", false, "JOKE_ID");
        public final static Property UserId = new Property(2, int.class, "userId", false, "USER_ID");
        public final static Property DingOrCai = new Property(3, int.class, "dingOrCai", false, "DING_OR_CAI");
        public final static Property Num = new Property(4, int.class, "num", false, "NUM");
        public final static Property IsUpload = new Property(5, int.class, "isUpload", false, "IS_UPLOAD");
    };


    public DingOrCaiDao(DaoConfig config) {
        super(config);
    }
    
    public DingOrCaiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DING_OR_CAI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"JOKE_ID\" INTEGER NOT NULL ," + // 1: jokeId
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"DING_OR_CAI\" INTEGER NOT NULL ," + // 3: dingOrCai
                "\"NUM\" INTEGER NOT NULL ," + // 4: num
                "\"IS_UPLOAD\" INTEGER NOT NULL );"); // 5: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DING_OR_CAI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DingOrCai entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getJokeId());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getDingOrCai());
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getIsUpload());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DingOrCai entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getJokeId());
        stmt.bindLong(3, entity.getUserId());
        stmt.bindLong(4, entity.getDingOrCai());
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getIsUpload());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DingOrCai readEntity(Cursor cursor, int offset) {
        DingOrCai entity = new DingOrCai( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // jokeId
            cursor.getInt(offset + 2), // userId
            cursor.getInt(offset + 3), // dingOrCai
            cursor.getInt(offset + 4), // num
            cursor.getInt(offset + 5) // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DingOrCai entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJokeId(cursor.getInt(offset + 1));
        entity.setUserId(cursor.getInt(offset + 2));
        entity.setDingOrCai(cursor.getInt(offset + 3));
        entity.setNum(cursor.getInt(offset + 4));
        entity.setIsUpload(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DingOrCai entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DingOrCai entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
